{"version":3,"sources":["utils/fetchClient.ts","api/todos.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/Todo/TodoItem.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","deleteTodo","todoId","updateTodo","getUserByEmail","email","a","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","TodoItem","todo","removeTodo","changeTodo","loadingTodosId","title","completed","newTodoField","useRef","isDoubleClicked","setIsDoubleClicked","updatedTitle","setUpdatedTitle","current","focus","handleChangeOfTitle","data-cy","defaultChecked","ref","onBlur","onKeyDown","key","onDoubleClick","onClick","includes","App","useContext","todos","setTodos","todoTitle","setTodoTitle","setError","hidden","setHidden","sortBy","setSortBy","isToggle","setIsToggle","setLoadingTodosId","filteredTodos","filter","switchError","newError","addTodo","newTodoId","length","newTodo","userId","prev","createdTodo","map","curr","useCallback","prevTodos","currentTodo","todosId","updatedTodo","active","href","selected","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.6b5bc491.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (userId: number, title: string) => {\n  return client.post<Todo>('/todos', { userId, title, completed: false });\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (todoId: number, data: any) => {\n  return client.patch<Todo>(`/todos/${todoId}`, data);\n};\n// Add more methods here\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport {\n  FC,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n  removeTodo: (n: number) => void,\n  changeTodo: (id: number, data: any) => void,\n  loadingTodosId: number[],\n}\n\nexport const TodoItem: FC<Props> = ({\n  todo,\n  removeTodo,\n  changeTodo,\n  loadingTodosId,\n}) => {\n  const {\n    title,\n    completed,\n    id,\n  } = todo;\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  const [isDoubleClicked, setIsDoubleClicked] = useState(false);\n  const [updatedTitle, setUpdatedTitle] = useState(title);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isDoubleClicked]);\n\n  const handleChangeOfTitle = () => {\n    if (!updatedTitle) {\n      removeTodo(id);\n    }\n\n    if (updatedTitle === title) {\n      setIsDoubleClicked(false);\n\n      return;\n    }\n\n    changeTodo(id, { title: updatedTitle });\n\n    setIsDoubleClicked(false);\n  };\n\n  return (\n    <div data-cy=\"Todo\" className={classNames('todo', { completed })}>\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          defaultChecked={completed}\n          onChange={() => changeTodo(id, { completed: !completed })}\n        />\n      </label>\n\n      {isDoubleClicked\n        ? (\n          <form onSubmit={(e) => {\n            e.preventDefault();\n            handleChangeOfTitle();\n          }}\n          >\n            <input\n              data-cy=\"TodoTitleField\"\n              type=\"text\"\n              className=\"todo__title-field\"\n              ref={newTodoField}\n              placeholder=\"Empty todo will be deleted\"\n              value={updatedTitle}\n              onChange={(e) => {\n                setUpdatedTitle(e.target.value);\n              }}\n              onBlur={() => handleChangeOfTitle()}\n              onKeyDown={(e) => {\n                if (e.key === 'Escape') {\n                  setIsDoubleClicked(false);\n                  setUpdatedTitle(title);\n                }\n              }}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              data-cy=\"TodoTitle\"\n              className=\"todo__title\"\n              onDoubleClick={() => setIsDoubleClicked(true)}\n            >\n              {title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              data-cy=\"TodoDeleteButton\"\n              onClick={() => removeTodo(id)}\n            >\n              ×\n            </button>\n          </>\n        )}\n\n      <div\n        data-cy=\"TodoLoader\"\n        className={classNames('modal overlay', {\n          'is-active': loadingTodosId.includes(id),\n        })}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\nimport React, {\n  FormEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  createTodo,\n  deleteTodo,\n  getTodos,\n  updateTodo,\n} from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { TodoItem } from './components/Todo/TodoItem';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const user = useContext(AuthContext);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [error, setError] = useState('');\n  const [hidden, setHidden] = useState(true);\n  const [sortBy, setSortBy] = useState('');\n  const [isToggle, setIsToggle] = useState(false);\n  const [loadingTodosId, setLoadingTodosId] = useState<number[]>([]);\n\n  const filteredTodos = todos.filter(todo => {\n    switch (sortBy) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return todos;\n    }\n  });\n\n  const switchError = (newError: string) => {\n    setError(newError);\n    setTimeout(() => setError(''), 3000);\n  };\n\n  const addTodo = async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!todoTitle) {\n      switchError('Title cant be empty');\n\n      return;\n    }\n\n    if (!user) {\n      return;\n    }\n\n    const newTodoId = -(todos.length);\n    const newTodo = {\n      id: newTodoId,\n      userId: user.id,\n      title: todoTitle,\n      completed: false,\n    };\n\n    setTodos(prev => [...prev, newTodo]);\n    setLoadingTodosId(prev => [...prev, newTodoId]);\n\n    try {\n      const createdTodo = await createTodo(user.id, todoTitle);\n\n      setTodos(prev => prev.map(todo => {\n        if (todo.id === newTodoId) {\n          return createdTodo;\n        }\n\n        return todo;\n      }));\n    } catch {\n      setTodos(prev => prev.filter(todo => todo.id !== newTodoId));\n      switchError('Unable to add todo');\n    }\n\n    setTodoTitle('');\n    setLoadingTodosId(prev => prev.filter(curr => curr !== newTodo.id));\n  };\n\n  const removeTodo = useCallback(async (todoId: number) => {\n    setLoadingTodosId(prev => [...prev, todoId]);\n\n    try {\n      await deleteTodo(todoId);\n      setTodos(prevTodos => prevTodos.filter(\n        currentTodo => currentTodo.id !== todoId,\n      ));\n    } catch {\n      switchError('Unable to delete todo');\n    }\n\n    setLoadingTodosId(todosId => todosId.filter(curr => curr !== todoId));\n  }, [deleteTodo]);\n\n  const changeTodo = useCallback(async (id: number, data: any) => {\n    setLoadingTodosId(todosId => [...todosId, id]);\n\n    const updatedTodo = await updateTodo(id, data);\n\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        return updatedTodo;\n      }\n\n      return todo;\n    }));\n\n    setLoadingTodosId(todosId => todosId.filter(curr => curr !== id));\n  }, [updateTodo]);\n\n  const closeNotification = () => {\n    setHidden(prev => !prev);\n    setError('');\n  };\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    getTodos(user.id)\n      .then(setTodos);\n  }, [user]);\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {todos.length > 0 && (\n            <button\n              data-cy=\"ToggleAllButton\"\n              type=\"button\"\n              onClick={() => {\n                setIsToggle(prev => !prev);\n\n                todos.map(todo => (\n                  changeTodo(todo.id, {\n                    completed: isToggle, loading: isToggle,\n                  })\n                ));\n              }}\n              className={classNames('todoapp__toggle-all', {\n                active: todos.filter(\n                  todo => todo.completed,\n                ).length === todos.length,\n              })}\n            />\n          )}\n\n          <form onSubmit={addTodo}>\n            <input\n              data-cy=\"NewTodoField\"\n              type=\"text\"\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={todoTitle}\n              onChange={(e) => {\n                setTodoTitle(e.target.value);\n                setError('');\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"todoapp__main\" data-cy=\"TodoList\">\n          {filteredTodos.map(todo => (\n            <TodoItem\n              todo={todo}\n              key={todo.id}\n              removeTodo={removeTodo}\n              changeTodo={changeTodo}\n              loadingTodosId={loadingTodosId}\n            />\n          ))}\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {`${todos.filter(todo => !todo.completed).length} items left`}\n            </span>\n\n            <nav className=\"filter\" data-cy=\"Filter\">\n              <a\n                data-cy=\"FilterLinkAll\"\n                href=\"#/\"\n                className={classNames('filter__link', {\n                  selected: sortBy === 'all',\n                })}\n                onClick={() => setSortBy('all')}\n              >\n                All\n              </a>\n\n              <a\n                data-cy=\"FilterLinkActive\"\n                href=\"#/active\"\n                className={classNames('filter__link', {\n                  selected: sortBy === 'active',\n                })}\n                onClick={() => setSortBy('active')}\n              >\n                Active\n              </a>\n              <a\n                data-cy=\"FilterLinkCompleted\"\n                href=\"#/completed\"\n                className={classNames('filter__link', {\n                  selected: sortBy === 'completed',\n                })}\n                onClick={() => setSortBy('completed')}\n              >\n                Completed\n              </a>\n            </nav>\n\n            <button\n              data-cy=\"ClearCompletedButton\"\n              type=\"button\"\n              className=\"todoapp__clear-completed\"\n              hidden={todos.filter(todo => todo.completed).length === 0}\n              onClick={() => {\n                setIsToggle(prev => !prev);\n                setTodos(prev => prev.filter(todo => {\n                  if (todo.completed) {\n                    removeTodo(todo.id);\n                  }\n\n                  return todo;\n                }));\n              }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n      </div>\n\n      {error && (\n        <div\n          data-cy=\"ErrorNotification\"\n          className=\"notification is-danger is-light has-text-weight-normal\"\n        >\n          <button\n            data-cy=\"HideErrorButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={closeNotification}\n            hidden={hidden}\n          />\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}